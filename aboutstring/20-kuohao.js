// s给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

// 有效字符串需满足：

// 左括号必须用相同类型的右括号闭合。
// 左括号必须以正确的顺序闭合。
// 每个右括号都有一个对应的相同类型的左括号。
//  

// 示例 1：

// 输入：s = "()"
// 输出：true
// 示例 2：

// 输入：s = "()[]{}"
// 输出：true
// 示例 3：

// 输入：s = "(]"
// 输出：false
//  

// 提示：

// 1 <= s.length <= 104
// s 仅由括号 '()[]{}' 组成

/**
 * @param {string} s
 * @return {boolean}
 */
//  方法一：栈
//  判断括号的有效性可以使用「栈」这一数据结构来解决。
 
//  我们遍历给定的字符串 ss。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。
 
//  当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串 ss 无效，返回 \text{False}False。
// 为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。
 
//  在遍历结束后，如果栈中没有左括号，说明我们将字符串 ss 中的所有左括号闭合，返回 \text{True}True，否则返回 \text{False}False。
 
//  注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 \text{False}False，省去后续的遍历判断过程。

 var isValid = function(s) {
    //思路：使用栈的接口来解决
    //首先这个玩意儿一定长度得是个双数
    if (s.length % 2 === 1) {
        return false;
    }
    //这个map和作用是通过右边括号找到左边括号
    let pairs = new Map(
        [
            [')', '('],
            [']', '['],
            ['}', '{']
        ]
    )
    let stack = []
    for (let ch of s){
         //这个判断的含义是遇到右括号的时候必须出栈对应的左括号
        if (pairs.has(ch)){
           //如果没有对应的左括号的话就，或者这时候长度为0就直接终止判断
            if (!stack.length || stack[stack.length - 1] !== pairs.get(ch)) {
                return false;
            }
            //如果不符合上述判断说明符合条件 左边括号出栈
            stack.pop()
        }else{
            //这个判断分支说明是左括号
            stack.push(ch)
        }
    }
    return !stack.length;
};
isValid('{[()]}')